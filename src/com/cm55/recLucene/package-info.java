/**
 * Nグラムアナライザに限定し日本語インデックスをLucene上で簡単に扱うための
 * パッケージ。
 * 
 * <h2>概要</h2>
 * <p>
 * Lucene自体は優れたオープンソースプロダクトではあるが、そのAPIは非常にわかりにくい。
 * 以下ではLuceneデータベースの概要について説明し、次に本パッケージによってLuceneの機能を
 * いかに利用するかについて説明する。
 * </p>
 * <h2>Luceneの概要</h2>
 * <p>
 * まず、Luceneのデータベースには、{@link Document}というレコードの単位でデータが格納され、そのレコードの
 * 各フィールドにインデックス付けされる。検索時には、どのフィールドについてどのような検索を行うかを指定することになる。
 * </p>
 * <p>
 * ただし、Luceneのレコード({@link Document})には、通常のリレーショナル・データベースのような考え方は
 * 無い。つまり、
 * </p>
 * <ul>
 * 
 * <li>特に複数のレコード間において共通の「構造」や、共通する「フィールド」が存在しなくてよい。
 * それぞれのレコードには、バラバラの任意のフィールドが存在して構わない。
 * これに対して、利用者側で「これこれのデータの格納時にはこの構造を使用する」ことを決めてやり、それを守らないと
 * いけない。
 * この方針が無いと、データベース内はカオス状態になってしまう。もちろん、それでもフィールド名称と検索データを
 * 指定してやれば、それなりに検索してくることはできる。
 * 
 * <li>当然ながら、「プライマリキー」などという概念はなく、全く同じ二つのレコードが何個でも格納できてしまう。
 * これを制御してやらないと、同じデータを更新する際に困ることになる。
 * つまり、利用者側で一つのフィールドを「プライマリキーフィールド」として想定し、特定のプライマリキー値を含むレコード
 * を書き込む場合には、いったんそのプライマリキー値を指定して削除してから新規レコードを追加する必要がある。
 * ただし、これを簡単に行うAPI（updateDocument)はLucene側に用意されている。
 * </ul>
 * 
 * <h2>利用方針</h2>
 * <p>
 * 要するに、Luceneのデータベースには「なんでもかんでも好きなように格納できてしまうため、ある程度の制限を
 * 設けなければいけない。
 * 通常、Luceneを利用する場面としては、あるRDBレコードに格納される文字列をLucene側にも格納し、
 * Lucene側にて高速に検索して、元のレコードのプライマリキーを取得できれば良いかと思われる。
 * </p>
 * <p>
 * そして、それらのLucene側に格納されるレコードは「すべて同じ形をしている」。つまり、同じ数と名称と機能の
 * フィールドからなる同じレコードを複数格納されればよい。また、そのレコードの中に一つのプライマリキーフィールド
 * が保持されればよい。
 * </p>
 * <p>
 * このため、RDBマッパと同じように、Luceneレコードを一つのJavaクラスとして定義し、そのオブジェクトを格納
 * し、逆に検索時にはそのオブジェクトが取得できるようにする。
 * ただし、最終的に取得される「プライマリキー」以外を取得しても意味が無いため（それらはもともとのRDBに格納
 * されているものだから）、プライマリキーを取得するのに便利なメソッドを用意する。
 * </p>
 * 
 * <h2>{@link RlFieldAttr}</h2>
 * <p>
 * 
 * </p>
 * 
 * <h2>Luceneの仕様についてのQ&A</h2>
 * 
 * <h3>登録済ドキュメントの一部のフィールドだけを書き換えることが可能か</h3>
 * <p>
 * 「2.3.3 Updating documents in the index」に記述。
 * 不可能。updateDocumentは指定されたTermに該当するドキュメントを削除して、指定されたドキュメントを
 * 挿入するだけ。特定のフィールドを書き換えるということはできない。
 * </p>
 * http://hrycan.com/2009/11/26/updating-document-fields-in-lucene/
 * <p>
 * ちなみに一つのドキュメントの中に同じ名前のフィールドを複数作成することが可能なことに注意。
 * </p>
 * <h3>inner joinは可能か</h3>
 * <p>
 * つまり、複数の異なるドキュメントについて、あるドキュメントのフィールド値の値を持つ他ドキュメントのみを取得する。
 * これは可能なようだが、複雑。
 * </p>
 * <ul>
 * <li>http://stackoverflow.com/questions/5497861/joins-in-lucene
 * <li>http://blog.mikemccandless.com/2012/01/searching-relational-content-with.html
 * </ul>
 * <p>
 * Lucene5ではToChildBlockJoinQuery, ToParentBlockJoinQueryを使うようだが、面倒すぎる。
 * </p>
 */
package com.cm55.recLucene;
